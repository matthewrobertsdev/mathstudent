{"version":3,"sources":["model/mathteachers/MathTeacher.js","model/mathteachers/mathteachings/FractionTeaching.js","model/mathteachers/math/Primes0to10_000.js","model/mathteachers/math/AbsoluteValue.js","model/mathteachers/math/PrimeFactorization.js","model/mathteachers/math/Product.js","model/utilities/ListUtility.js","model/mathteachers/math/Fraction.js","model/mathteachers/Solutions/FractionSolutions.js","model/mathteachers/FractionTeacherMethods/AddFractiontoFraction.js","model/mathteachers/FractionTeacherMethods/CreatFromNumeratorAndDenominator.js","model/mathteachers/FractionTeacherMethods/CreateFractionFromInteger.js","model/utilities/GetRandomInt.js","model/mathteachers/FractionTeacher.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","model/mathteachers/mathteachings/MathTeaching.js"],"names":["MathTeacher","args","console","log","length","i","undefined","parseInt","tooLargeToSimplify","tellSimplestFormHeading","tryToSimplifyHeading","tryToSimplify","tellNeedToSimplifyFirst","forTheFirstFraction","forTheSecondFraction","itIsAlreadyInSimplestForm","checkOutSimplifyingFractions","needLCD","solutionHeading","objectName","displayNameSingular","singularLowerCase","displayNamePlural","pluralLowerCase","methods","numerator","denominator","latex","this","isNaN","problemDescription","newNumerator","newDenominator","nArray","dArray","MathTeaching","makeListFromArray","primes","gcf","product","GCF","objectNumerator","objectDenominator","num1","denom1","num2","denom2","latex1","latex2","fractionDescription","integer","firstNumerator","firstDenominator","secondNumerator","secondDenominator","initAddAFraction","num","denom","lcd","numerator1","numerator2","sum","factor","primes1","primes2","primesUnion","Primes0to10_000","AbosoluteValue","value","input","absoluteValue","PrimeFactorization","AbsoluteValue","absoluteValueIsEqualOrLessThan","primeFactors","push","getPrimeFactorsUnder100_000_000","Product","array","ListUtility","array1","array2","firstArray","slice","secondArray","elementsInCommon","forEach","indexOf","splice","concat","sort","elementsInCommonOrderCounts","a1","a2","notDone","c","Fraction","basicLatex","getProductOfList","getPrimeFactorsUnder10_000","a","b","fraction","reducedFraction","fractionSolution","type","solutions","function","fractionLatex","inputs","teaching","FractionTeaching","addAFraction","validateParams","undefinedAddition","addAFractionProblem","indeterminateAddition","absVal100_000_000OrLess","fraction1","createFromNumAndDenom","fraction2","initialization","solution","simplify","answer","tellInteger","tellFraction","denominatorIsTheSame","tellLCD","tellAddNumerators","tellFactorLCDSolution","simplification1","simplification2","initialization2","elementsNoDuplicatesInCommon","factor1","factor2","newNumerator1","newNumerator2","tellPrimesUnion","multiplyFractionsByMultiple","denomIsDivisbleByOtherDenom","tellSimplificationToInteger","tellSimplificationToFraction","Error","fromNumeratorAndDenominator","mathObject","primeFactorsTeaching","indeterminate","denominatorIs1","numeratorIs1","numeratorEqualsDenominator","denominatorModNumeratorIs0","numeratorModDenominatorIs0","getPrimeFactors","tellPrimesInCommon","tellGCF","divideByGCF","tellNoPrimesInCommon","disclaimer","fromInteger","getRandomInt","min","max","Math","floor","random","getRandomIntArray","FractionTeacher","goodInput","goodProblemInput","goodAnswerInput","teach","problem","fromNumeratorAndDenominatorProblem","fromIntegerProblem","method","error","tellBadInput","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","call","e","_typeof","obj","Symbol","iterator","constructor","_possibleConstructorReturn","self","ReferenceError","_createSuper","Derived","result","Super","NewTarget","arguments","apply","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","list"],"mappings":"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AK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACtE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK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","file":"static/js/4.e484b83f.chunk.js","sourcesContent":["class MathTeacher{\n  normalizeFractionPairs(args) {\n    console.log(\"abcd\"+args.length)\n    for (let i=0; i<args.length; i++) {\n      if (args[i]===undefined) {\n        args[i]=\"\"\n      }\n    }\n    for (let i=0; i<args.length-1; i+=2) {\n      try {\n        args[i]=parseInt(args[i])\n        args[i+1]=parseInt(args[i+1])\n        if (args[i]>0 && args[i+1]<0) {\n          args[i]*=-1\n          args[i+1]*=-1\n        }\n      } catch {\n\n      }\n    }\n    console.log(\"in normalize\"+args)\n    return args\n  }\n}\nexport default MathTeacher;","import MathTeaching from './MathTeaching'\nclass FractionTeaching extends MathTeaching {\n  constructor() {\n    super();\n    this.objectName = \"Fraction\";\n    this.displayNameSingular = \"Fraction\";\n    this.singularLowerCase = \"fraction\";\n    this.displayNamePlural = \"Fractions\";\n    this.pluralLowerCase = \"fractions\";\n    this.methods = [\n      //create from a numerator and a denominator\n      ['Create a fraction with a numerator and a denominator', 'fromNumeratorAndDenominator',\n        'numerator', 'integer', 'denominator', 'integer'],\n      //create from an integer\n      ['Create a fraction from an integer', 'fromInteger', 'integer', 'integer'],\n      //add a fraction to a fraction\n      ['Add a fraction to a fraction', 'addAFraction', 'first numerator', 'integer',\n        'first denominator', 'integer', 'second numerator', 'integer',\n        'second denominator', 'integer']\n        \n      /*,\n      //subtract a fraction from a fraction\n      ['Subtract a fraction from a fraction', 'subtractAFraction', 'first numerator', 'integer',\n        'first denominator', 'integer', 'second numerator', 'integer',\n        'second denominator', 'integer'],\n      //multiply a fraction by a fraction\n      ['Multiply a fraction by a fraction', 'multiplyByAFraction', 'first numerator', 'integer',\n        'first denominator', 'integer', 'second numerator', 'integer',\n        'second denominator', 'integer'],\n      //divide a fraction by a fraction\n      ['Divide a fraction by a fraction', 'divideByAFraction', 'first numerator', 'integer',\n        'first denominator', 'integer', 'second numerator', 'integer',\n        'second denominator', 'integer'],\n      //add a mixed number to a fraction\n      ['Add a mixed number to a fraction', 'addAMixedNumber', 'mixed number', 'mixedNumber', 'numerator', 'integer',\n        'denominator', 'integer'],\n      //subtract a mixed number from a fraction\n      ['Subtract a mixed number from a fraction', 'subtractAMixedNumber', 'mixed number', 'mixedNumber', 'numerator', 'integer',\n        'denominator', 'integer'],\n      //multiply a fraction by a mixed number\n      ['Multiply a fraction by a mixed number', 'multiplyByAMixedNumber', 'mixed number', 'mixedNumber', 'numerator', 'integer',\n        'denominator', 'integer'],\n      //divide a fraction by a mixed number\n      ['Divide a fraction by a mixed number', 'divideByAMixedNumber', 'mixed number', 'mixedNumber', 'numerator', 'integer',\n        'denominator', 'integer']\n        */\n    ]\n  }\n\n  fractionDescription(numerator, denominator) {\n    return `begin fraction \\\n    ${numerator} over ${denominator} end fraction`\n  }\n\n  fromNumeratorAndDenominator(numerator, denominator, latex) {\n    const construction = `{str}You create a fraction from a numerator and a denominator by \\\n    placing the numerator above the denominator, with a horizontal bar \\\n    between them.`\n    if (numerator === undefined || denominator === undefined || latex === undefined) {\n      return [\n        `{history}`,\n        construction,\n        `{br}`,\n        `{str}They look like this:`,\n        `{$bl}\\\\frac{\\\\textrm{numerator}}{\\\\textrm{denominator}}{$bl}begin fraction \\\n        numerator over denominator end fraction`,\n        `{str}For example, 2 over 5 looks like this:`,\n        `{$bl}\\\\frac{2}{5}{$bl}begin fraction \\\n        2 over 5 end fraction`,\n        this.tryToSimplifyHeading,\n        `{str}You should try to simplify fractions once you create them.  This way, \\\n        it is easier to tell their value as simplified fractions are simpler \\\n        than unsimplified fractions.`,\n        `{br}`,\n        `{str}If a fraction is 0 over 0, it cannot \\\n        be simplified, as, as discussed in fraction's page, it is indeterminate, and, if \\\n        it is any other number over 0, it is undefined, and also cannot be simplified, \\\n        which is also discussed in fraction's page.  However, any other pair of \\\n        numerator and denominator might be simplifiable.  `,\n        `{br}`,\n        `{str}The numerator and denominator \\\n        can be rewritten as a product of their numbers found in their prime factorization,\\\n         the smallest numbers that they can be divided up into.  \\\n         A prime factor is divisble by only 1 and itself.  \\\n        Once you know the numbers from the prime factorization of a fraction, you can \\\n        if the numerator and denominator have any in common.  If they do, you can divide both the numerator \\\n        and denominator by these prime factors, as they divide out to be equal to 1, \\\n        and any number times 1 is itself, so by dividing both the numerator and denominator \\\n        by them, we do not change the value of the fraction, as we just are dividing by \\\n        one.  We then just multiply the remaining prime factors in the numerator and \\\n        denominator to get a single number for each.  Then the fraction is in \\\n        simplest form.  `,\n        `{br}`,\n        `{str}For example, if we have 4 over 8 (four eigths), the prime factorization of \\\n        4 results in 2 times 2 and the prime factorization of 8 results in 2 times 2 \\\n        times 2.  Because they have 2 times 2 in common, we can divide out 4 from both \\\n        the numerator and denominator to get to 1 over 2 \\\n        (1 half)`,\n        `{br}`,\n        `{str}The fraction is not simplifiable if it is indeterminate, undefined, \\\n        or if its numerator and denominator have no prime factors in common.  Then it is \\\n        already in simplest form.`,\n        `{br}`,\n        `{str}If either the numerator or the denominator is divisble \\\n        by the other, you can simply divide them both by it.  Then prime factorization is \\\n        not needed to make sure all primes in common are found.`\n      ]\n    } else if (isNaN(numerator) || isNaN(denominator)) {\n      return (\n        [\n          `{h}Bad input`,\n          `{str}Sorry, but Math Teacher's lesson for fractions expects\n           your inputs to be counting numbers, 0 or negative numbers.`\n        ]\n      )\n    } else {\n      return (\n        [\n          `{history}`,\n          `{str}In this case, the numerator is ${numerator} and the \\\n          denominator is ${denominator}, so you have ${numerator} over \\\n          ${denominator}, which is the following:`,\n          `{$bl}${latex}{$bl}begin fraction \\\n          ${numerator} over ${denominator} end fraction`\n        ]\n      )\n    }\n  }\n\n  indeterminate(latex) {\n    return ([\n      `{h}The value of the fraction of 0 over 0 is indeterminate`,\n      `{$il}${latex}{$il}begin fraction \\\n      0 over 0 end fraction`,\n      `{str} is indeterminate.  You cannot tell the value of `,\n      `{$il}${latex}{$il}begin fraction \\\n      0 over 0 end fraction`,\n      `{str} as fractions just represent division of the numerator by the \\\n      denominator so it's value is the number that multiplies by 0 \\\n      (the denominator) to get 0 (the numerator), \\\n      but that is any number, because any number times 0 is 0.`\n    ]\n    )\n  }\n\n  undefinedAddition(problemDescription){\n    return ([\n    problemDescription,\n    `{h}is undefined.`,\n  `{str}Because any non-zero number over 0 is \\\nundefined, we cannot determine the value of this.  Check out About Fractions Fractions' Page \\\nto learn why.`])\n  }\n\n  indeterminateAddition(problemDescription){\n    return ([`{h}We cannot determine the value of`,\n    problemDescription,\n  `{str}Because 0 over 0 is \\\nindeterminate, we cannot determine the value of this.  Check out About Fractions in Fractions' Page \\\nto learn why.`])\n  }\n\n  undefined(numerator, latex) {\n    return ([\n      `{h}The value of the fraction of ${numerator} over 0 is undefined`,\n      `{$il}${latex}{$il}begin fraction \\\n      ${numerator} over 0 end fraction`,\n      `{str} is undefined, as are all non-zero numbers divided by 0, \n      as fractions just represent division of the \\\n      numerator by the denominator so this fraction's value is the number that \\\n      multiplies by 0 (the denominator) to get ${numerator}, \\\n      but no number times 0 equals anything other than 0, as 0 multiplied by any \\\n      number is 0.`\n    ]\n    )\n  }\n\n  numeratorEqualsDenominator(numerator, denominator, latex) {\n    return ([\n      this.tryToSimplifyHeading,\n      `{$il}${latex}{$il}begin fraction \\\n      ${numerator} over ${denominator} end fraction`,\n      `{str} has the value of 1, as any number divided by itself is 1.`\n    ]\n    )\n  }\n  numeratorModDenominatorIs0(numerator, denominator, newNumerator) {\n    return ([\n      this.tryToSimplifyHeading,\n      this.tryToSimplify,\n      `{br}`,\n      `{str}Because both the numerator ${numerator} and the denominator ${denominator} \\\n      are divisble by the denominator ${denominator}, divide the numerator \\\n      ${numerator} by the denominator ${denominator} to get ${newNumerator}.  \\\n      Since a fraction is just division, it simplifies to ${newNumerator}.  \\\n      The fraction simplifies to:`,\n      `{$bl}${newNumerator}{$bl}newNumerator`\n    ]\n    )\n  }\n\n  denominatorModNumeratorIs0(numerator, denominator, latex, newDenominator) {\n    return ([\n      this.tryToSimplifyHeading,\n      this.tryToSimplify,\n      `{br}`,\n      `{str}Because both the denominator ${denominator} and numerator ${numerator} \\\n      are divisble by the numerator ${numerator}, divide the denominator ${denominator} \\\n      by the numerator ${numerator} to get ${newDenominator} and the numerator \\\n      ${numerator} by ${numerator} to get 1.  The fraction simplifies to:`,\n      `{$bl}${latex}{$bl}begin fraction \\\n      1 over ${newDenominator} end fraction`\n    ]\n    )\n  }\n\n  tooLargeToSimplify =\n    `{str}Sorry, but Math Teacher does not work when numbers \\\n    used in the problem are greater than 100,000,000.`\n\n  denominatorIs1(numerator, latex) {\n    return [\n      this.tryToSimplifyHeading,\n      `{str}Whenever the denominator is 1, the fraction can be rewritten \\\n      as just a regular number, as any number divided by 1 is itself.  `,\n      `{$il}${latex}{$il}begin fraction \\\n          ${numerator} over one end fraction`,\n      `{str} simplifies to just ${numerator}.`\n    ]\n  }\n\n  numeratorIs1(denominator, latex) {\n    return [\n      this.tryToSimplifyHeading,\n      `{str}When the numerator is 1, but the denominator is not 1 or 0, the fraction \\\n      is unsimplifiable because you cannot cancel out any primes with the denominator \\\n      as the numerator is as small as it can be.`,\n      `{br}`,\n      `{str}So simplest form is just`,\n      `{$il}${latex}{$il}begin fraction \\\n      ${denominator} over one end fraction`,\n      `{str}.`,\n    ]\n  }\n\n  getPrimeFactors(numerator, nArray, denominator, dArray) {\n    return [\n      this.tryToSimplifyHeading,\n      `{br}`,\n      this.tryToSimplify,\n      `{br}`,\n      `{str}You can see if your fraction is simplifable by seeing if its numerator \\\n      and denominator have primes in common using Prime Factorization.  `,\n      `{br}`,\n      `{str}Please check out Primes and Prime Factorization if you are not familiar \\\n      with these topics.`,\n      `{br}`,\n      `{str}Basically, primes are divisble by \\\n      only themselves and 1, and prime factorization gives you all the primes \\\n      that a number is divisble by.  Because primes are the smallest whole numbers \\\n      you can divide a number into, if their are numbers can be divided out, they \\\n      are prime or can be divided into primes.  The prime ${nArray.length === 1 ? 'factor' : 'factors'} \\\n      of the numerator, ${numerator}, ${nArray.length === 1 ? 'is just' : 'are'} \\\n      ${MathTeaching.makeListFromArray(nArray)}, and the prime ${dArray.length === 1 ? 'factor' : 'factors'} \\\n      of the denominator, ${denominator}, ${dArray.length === 1 ? 'is just' : 'are'} \\\n      ${MathTeaching.makeListFromArray(dArray)}.`\n    ]\n  }\n\n  tellPrimesInCommon(primes) {\n    return (\n      `{str}They have prime ${primes.length === 1 ? 'factor' : 'factors'} \\\n      ${MathTeaching.makeListFromArray(primes)} in common.`\n    )\n  }\n  tellNoPrimesInCommon() {\n    return (\n      `{str}Because this fraction's numerator and denominator have no prime factors \\\n      in common, the fraction cannot be simplified.`\n    )\n  }\n  tellGCF(gcf, product) {\n    return (\n      `{str}Therefore, the greatest common factor ${product ? 'is the product of the common factors,' : 'is just'} ${gcf}.`\n    )\n  }\n\n  divideByGCF(numerator, denominator, GCF, objectNumerator, objectDenominator) {\n    return (\n      `{str}Dividing both the top and bottom by the GCF doesn't change the value of the \\\n      fraction, as divding by GCF over the GCF is the same as dividing by 1, \\\n      and anything divided by 1 is itself.  \\\n      The results are numerator ${numerator} divided by ${GCF} is ${objectNumerator} \\\n      and denominator ${denominator} divided by ${GCF} is ${objectDenominator}.`\n    )\n  }\n\n  tellSimplestFormHeading = `{h}Simplest Form`\n\n  tryToSimplifyHeading = `{h}Try to simplify`\n\n  tryToSimplify = `{str}To simplify a fraction, try to find all the numbers that \\\n  both the numerator and denominator are divisible by.  Since these numbers are \\\n  divided by themselves in the fraction, dividing the numerator and denominator \\\n  by them is the same as dividing by 1, so it does not change the value of the \\\n  fraction.  `\n\n  tellFraction(numerator, denominator, latex) {\n    return (\n      `{$bl}${latex}{$bl}begin fraction \\\n      ${numerator} over ${denominator} end fraction`\n    )\n  }\n\n  tellSimplificationToFraction(num1, denom1, num2, denom2, latex1, latex2) {\n    return (\n      `{$bl}${latex1}=${latex2} \\\n      {$bl}${this.fractionDescription(num1, denom1)} equals \\\n      ${this.fractionDescription(num2, denom2)}`\n    )\n  }\n\n  tellSimplificationToInteger(num1, denom1, latex1, integer) {\n    return (\n      `{$bl}${latex1}=${integer} \\\n      {$bl}${this.fractionDescription(num1, denom1)} equals \\\n      ${integer}`\n    )\n  }\n\n  fromInteger(numerator, latex) {\n    if (numerator === undefined || latex === undefined) {\n      return [\n        `{str}You create a fraction from an integer by simply placing the integer \\\n        over 1, seprated by a horizontal bar, as any number divided by 1 \\\n        is itself, so you will not change the value of the integer but you \\\n        will get a numerator over a denominator, which is what you need to \\\n        have to have a fraction.  `,\n        `{$bl}\\\\text{integer}=\\\\frac{\\\\text{integer}}{1}{$bl}integer equals ${this.fractionDescription(\n          `integer`, `1`)} `,\n        `{str}For example, 5 can be written as 5 over 1.`,\n        `{$bl}5=\\\\frac{5}{1}{$bl}${this.fractionDescription(\n          `5`, `1`)} `,\n        \n      ]\n    }\n    else if (isNaN(numerator)) {\n      return (\n        [\n          `{h}Bad input`,\n          `{str}Sorry, but Math Teacher's lesson for fractions expects\n           your inputs to be counting numbers, 0 or negative numbers.`\n        ]\n      )\n    } else {\n      return [\n        `{str}In this case, the integer is ${numerator} and we want to \\\n        convert it to a fraction.  Since any number divided by 1 is just itself, \\\n        we can just put ${numerator} over 1 and it will have the same value.  \\\n        Therefore, we have:`,\n        `{$bl}${latex}{$bl}begin fraction \\\n      ${numerator} over 1 end fraction`\n      ]\n    }\n  }\n\n  addAFraction(firstNumerator, firstDenominator,\n    secondNumerator, secondDenominator, latex) {\n    if (firstNumerator === undefined || firstDenominator === undefined ||\n      secondNumerator === undefined || secondDenominator === undefined ||\n      latex === undefined) {\n      return [\n        `{h}Find a common denominator`,\n        `{str}To add a fraction to a fraction, you must first manipulate them \\\n        to have common denominators.  This is because the numerators can then \\\n        be summed together because you will be summing quantities of the same \\\n        value.  To get a common denominator, you can use prime factorization, \\\n        and some multiplication of the results to get the smallest possible \\\n        common denominator, known as the Least Common Denominator or LCD.  \\\n        The LCD will be the Lowest Common Multiple (LCM) of the denominators.  This way,\n        both denominators will be divisble by it, as it is a multiple of them, \n        but it won't be larger than it has to be, as it is the lowest common \n        multiple of them, meaning the smallest common multiple.  \\\n        It's easiest to learn how with an example.  If you are trying to get \\\n        the LCM of 4 and 6, you get 2 and 2 as the results of the prime factorization \\\n        of 4 and 2 and 3 as the reuslts of the prime factorization of 6.  You need \\\n        all the factors to appear the greatest time they appear in any one of the \\\n        numbers, so that the LCM will be divisble by all factors of all numbers.  \\\n        Therefore, you need two 2s, because the greatest number of times 2 appears \\\n        in any of the numbers prime factorizations is twice, and one 3, because the \\\n        greatest number of times 3 appears in any of the numbers prime factorizations \\\n        is once.  The LCM is what you get multiplying these all together.  You get 2 \\\n        times 2 times 3, which is 12.  Therefore, any fractions with denominators 4 \\\n        and 6 have an LCD of 12, as the LCD will be the LCM of the denominators.`/*It will be the product that includes all primes from both prime \\\n        factorizations, but using primes that appear in both once for each time they appear in \\\n        both and including primes that appear in only one once each as well.  \\\n        This way, because it will have in its product all the primes from both, \\\n        it will be divisble by both denominators.`*/,\n        `{h}Manipulate both fractions to have the common denominator`,\n        `{str}For each fraction, get the number that is the common denominator divided by \\\n        the current denominator.  Then, multiply both the numerator and denominator by \\\n        this value, which is like multiplying by 1 as it is a fraction consisting of \\\n        one value above itself.  Then each fraction will have the LCD.`,\n        `{h}Add the fractions with common denominators`,\n        `{str}Once you have fractions with common denominators, the numerators keep track \\\n        of quantties of the same value, so you can just add the numerators together, \\\n        keeping the common denominator.`\n      ]\n    } else {\n      return this.initAddAFraction(firstNumerator)\n    }\n  }\n\n  tellBadInput() {\n    return (\n      [\n        `{h}Bad input`,\n        `{str}Sorry, but Math Teacher's lesson for fractions expects \\\n         your inputs to be counting numbers, 0 or negative numbers.`\n      ]\n    )\n  }\n\n  initAddAFraction(num1, denom1, num2, denom2, latex) {\n    return (\n      [\n        `{str}So we are trying to solve:`,\n        `{$bl}${latex}{$bl}${this.fractionDescription(num1, denom1)} \\\n        plus ${this.fractionDescription(num2, denom2)}`\n      ]\n    )\n  }\n  addAFractionProblem(num1, denom1, num2, denom2, latex){\n    return (\n        `{$bl}${latex}{$bl}${this.fractionDescription(num1, denom1)} \\\n        plus ${this.fractionDescription(num2, denom2)}`\n    )\n  }\n  fromNumeratorAndDenominatorProblem(num1, denom1, latex){\n    return (\n          `{$bl}${latex}{$bl}${this.fractionDescription(num1, denom1)}`\n    )\n  }\n  fromIntegerProblem(integer){\n    return (\n          `{$bl}${integer}{$bl}${integer}`\n    )\n  }\n  lookAtYourFirstFraction(num, denom, latex) {\n    return [\n      `{h}Take a look at your first fraction:`,\n      `{$bl}${latex}{$bl}${this.fractionDescription(num, denom)}`\n    ]\n  }\n\n  lookAtYourSecondFraction(num, denom, latex) {\n    return [\n      `{h}Take a look at your second fraction:`,\n      `{$bl}${latex}{$bl}${this.fractionDescription(num, denom)}`\n\n    ]\n  }\n\n  denominatorIsTheSame(denominator) {\n    return [\n      `{str}Because the two fractions already have the same denominator, \\\n  ${denominator}, it is the Lowest Common Denominator (LCD), as it is the \\\n  smallest number that is divisble by both denominators.`\n    ]\n  }\n\n  denomIsDivisbleByOtherDenom(denom1, denom2) {\n    return [\n      `{str}Because the denominator, ${denom1}, is divisble by \\\n    denominator, ${denom2}, ${denom1} is the Lowest Common Denominator \\\n    (LCD), as it is the smallest number that is divisble by both \\\n    denominators.  This is because it is the smallest number that is divsible \\\n    by the denominator ${denom1}.  That denominator, ${denom1}, is already \\\n    divisible by ${denom2}.`\n    ]\n  }\n\n  tellNeedToSimplifyFirst =\n    `{str}Because no Lowest Common Denominator (LCD) is obvious, we must find \\\n      one.  However, as working with big numbers is harder than working \\\n      with smaller numbers, we will find out if we can simplify our fractions first.  `\n\n  forTheFirstFraction = `{h}For the first fraction, we have:`\n\n  forTheSecondFraction = `{h}For the second fraction, we have:`\n\n  itIsAlreadyInSimplestForm = `{str}It is already in simplest form.  `\n\n  checkOutSimplifyingFractions = `{str}If you don't know why, check out Simplify a Fraction \\\n  for this fraction.  `\n\n  needLCD = `{h}So now we need to find the LCD.`\n\n  tellLCD(lcd) {\n    return [\n      `{h}The LCD is:`,\n      `{$bl}${lcd}{$bl}${lcd}`\n    ]\n  }\n\n  tellAddNumerators(denom, numerator1, numerator2, latex1, latex2, sum) {\n    return [\n      `{str}Because the fractions have a common denominator, ${denom}, \\\n    we can just add the numerators, ${numerator1} and ${numerator2}, \\\n    as they are keeping track of how many we have of fractions of the same size.\n    We have ${numerator1} plus ${numerator2}, all over ${denom}.`,\n      `{$bl}${latex1}=${latex2}{$bl}begin fraction ${numerator1} plus ${numerator2} \\\n    over ${denom} end fraction equals begin fraction ${sum} \\\n    over ${denom} end fraction`\n    ]\n  }\n\n  tellInteger(integer) {\n    return (\n      `{$bl}${integer}{$bl}${integer}`\n    )\n  }\n\n  solutionHeading = `{h}The solution is:`\n\n  /*\n  multiplyFractionByMultiple(lcd, numerator, denom, factor, newNumerator, latex) {\n    return (\n      [\n        `{str}So we must multiply the fraction that doesn't have the LCD \\\n       by what is needed to give it the LCD.  This is the LCD ${lcd} \\\n       divided by its denominator, ${denom}, which is ${factor}, which \\\n       we must place over itself so that when we multiply by it we will \\\n       just be multiplying by 1, as that is what a number (other than 0) \\\n       over itself simplifies to.  Here is the multiplication:`,\n        `{$bl}${latex}{$bl}${this.fractionDescription(\n          `${numerator} times ${factor}`, `${denom} times ${factor}`)} \\\n        equals ${this.fractionDescription(newNumerator, lcd)}`\n      ]\n    )\n  }\n  */\n\n  multiplyFractionsByMultiple(latex1, latex2, numerator, denom, factor, newNumerator, lcd) {\n    return (\n      [\n        `{str}We must get`,\n        `{$bl}${latex1}{$bl}${this.fractionDescription(\n          numerator, denom)}`,\n        `{str}over the LCD ${lcd}. `,\n          `{br}`,\n        `{str}We do this by dividing the LCD, ${lcd}, by the denominator, ${denom}, \\\n        to get ${factor}, which \\\n        we multiply both the numerator and the denominator by.  This way they divide \\\n        out to get the original fraction, so we have not changed the value of the \\\n        fraction.  We then will have an equal fraction with the LCD.  \\\n        Here is the multiplication:`,\n        `{$bl}${latex2}{$bl}${this.fractionDescription(\n          `${numerator} times ${factor}`, `${denom} times ${factor}`)} \\\n          equals ${this.fractionDescription(newNumerator, lcd)}`\n      ]\n\n    )\n  }\n\n  tellPrimesUnion(denom1, primes1, denom2, primes2, primesUnion, lcd) {\n    return [\n      `{str}To get the LCD, we first need to find all the prime factors of \\\n    the two denominators, as they are used in getting the LCD.  The LCD \\\n    needs to be a product that is gotten by including each of these prime factors,\n    including duplicates, but not counting them twice for every time they appear \\\n    as factors of both denominators.  This way, both denominators will be divisble \\\n    by this product, as it will have all the factors of each multiplied together.  \\\n    The prime \\\n    ${primes1.length === 1 ? 'factor' : 'factors'} of the \\\n    denominator ${denom1} ${primes1.length === 1 ? 'is just' : 'are'} \\\n    ${MathTeaching.makeListFromArray(primes1)}. \\\n    The prime \\\n    ${primes2.length === 1 ? 'factor' : 'factors'} of the \\\n    denominator ${denom2} ${primes2.length === 1 ? 'is just' : 'are'} \\\n    ${MathTeaching.makeListFromArray(primes2)}.  If you get each prime the greatest \\\n    number of times it goes into any denominator, you get `,/*If you get the primes from both \\\n    not including primes twice for appearing in both, but counting duplicates from \\\n    within the list of primes of each denominator, you get \\*/\n    `{str}${MathTeaching.makeListFromArray(primesUnion)}.  This way, the product of \\\n    these primes will be divisble by all the denominators, as it will be divisble by \\\n    all you multiply together to get each of denominators.  These primes multiply \\\n    together to get the LCD, ${lcd}.`\n    ]\n  }\n\n}\nexport default new FractionTeaching();\n","/* List of primes under 1,000,000*/\n\n/* Thank you to the people of http://www.mathematical.com/primes0to1000k.html for\n    providing the initial list of primes under 10,000*/\n\nconst Primes0to10_000=[\n    2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,\n    103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,\n    199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,\n    313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,\n    433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,\n    563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,\n    673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,\n    811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,\n    941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,\n    1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,\n    1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,\n    1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,\n    1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,\n    1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,\n    1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,\n    1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,\n    1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,\n    1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,\n    2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,\n    2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,\n    2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,\n    2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,\n    2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,\n    2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,\n    2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,\n    2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,\n    3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,\n    3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,\n    3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,\n    3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,\n    3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,\n    3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,\n    3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,\n    3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,\n    4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,\n    4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,\n    4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,\n    4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,\n    4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,\n    4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,\n    4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,\n    4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,\n    5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,\n    5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,\n    5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,\n    5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,\n    5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,\n    5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,\n    5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,\n    5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,\n    6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,\n    6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,\n    6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,\n    6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,\n    6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,\n    6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,\n    6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,\n    6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,\n    7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,\n    7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,\n    7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,\n    7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,\n    7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,\n    7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,\n    7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,\n    8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,\n    8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,\n    8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,\n    8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,\n    8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,\n    8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,\n    8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,\n    9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,\n    9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,\n    9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,\n    9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,\n    9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,\n    9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,\n    9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,\n    9949,9967,9973]\n    \n    export default Primes0to10_000","class AbosoluteValue{\n    static absoluteValue(value){\n        if (value<0){\n            return -value;\n        } else return value;\n    }\n    static absoluteValueIsEqualOrLessThan(input, value){\n        if (AbosoluteValue.absoluteValue(input)<=value){\n            return true;\n        } else { return false;}\n    }\n}\nexport default AbosoluteValue;","import Primes0to10_000 from \"./Primes0to10_000\";\nimport AbsoluteValue from './AbsoluteValue';\n\nclass PrimeFactorization{\n    static absVal100_000_000OrLess(value){\n        return AbsoluteValue.absoluteValueIsEqualOrLessThan(value, 100_000_000);\n    }\n    /* Take square root\n    If it is divisible by prime up to square root,\n    add to list\n    */ \n    static getPrimeFactorsUnder100_000_000(value){\n        value=AbsoluteValue.absoluteValue(value);\n        const primes=Primes0to10_000;\n        var primeFactors=[];\n        var i=0;\n        while (primes[i]<=value){\n            while(value%primes[i]===0){\n                primeFactors.push(primes[i]);\n                value/=primes[i];\n            }\n            i++;\n        }\n        if (value!==1) {\n          primeFactors.push(value)\n        }\n        return primeFactors;\n    }\n    static isPrime(){\n      if (PrimeFactorization.getPrimeFactorsUnder100_000_000.length===0) {\n        return true\n      } else {\n        return false\n      }\n    }\n}\nexport default PrimeFactorization;","class Product{\n    static getProductOfList(array){\n        var product=1; for (var i=0; i<array.length; i++){ product*=array[i]; }\n        return product;\n    }\n}\nexport default Product;","class ListUtility {\n  //get elemntsInCommon\n  //loop and remove already included from each array\n  //concat results\n  static elementsNoDuplicatesInCommon(array1, array2) {\n    let firstArray=array1.slice()\n    let secondArray=array2.slice()\n    let elementsInCommon = ListUtility.elementsInCommon(firstArray, secondArray)\n    elementsInCommon.forEach(value => {\n      if (firstArray.indexOf(value) !== -1) {\n        firstArray.splice(firstArray.indexOf(value), 1)\n      }\n    }\n    )\n    elementsInCommon.forEach(value => {\n      if (secondArray.indexOf(value) !== -1) {\n        secondArray.splice(secondArray.indexOf(value), 1)\n      }\n    }\n    )\n\n    firstArray=firstArray.concat(elementsInCommon)\n    firstArray=firstArray.concat(secondArray)\n    firstArray.sort()\n    return firstArray\n    //return (array1.concat(array2.filter(value=>!array1.includes(value)))).sort()\n  }\n  static elementsInCommon(array1, array2) {\n    //return array1.filter(value => array2.includes(value))\n\n    if (array1.length < array2.length) {\n      return this.elementsInCommonOrderCounts(array1, array2);\n    } else {\n      return this.elementsInCommonOrderCounts(array2, array1);\n    }\n  }\n\n\n  static elementsInCommonOrderCounts(array1, array2) {\n    var a1 = array1.slice(); var a2 = array2.slice();\n    var elementsInCommon = [];\n    for (var i = 0; i < a1.length; i++) {\n      var notDone = true;\n      var c = 0;\n      while (notDone && c < a2.length) {\n        if (a1[i] === a2[c]) {\n          elementsInCommon.push(a2[c]);\n          a2.splice(c, 1);\n          notDone = false;\n        }\n        c++\n      }\n    }\n    return elementsInCommon;\n  }\n\n}\nexport default ListUtility","import PrimeFactorization from './PrimeFactorization';\nimport Product from './Product';\nimport ListUtility from '../../utilities/ListUtility'\nimport MathTeachingObject from './MathTeachingObject';\nclass Fraction extends MathTeachingObject{\n    constructor(){\n        super();\n        this.numerator=0;\n        this.denominator=0;\n    }\n    createFromNumAndDenom(args){ this.numerator=parseInt(args[0]); \n        this.denominator=parseInt(args[1]);}\n    createFromInteger(args){ parseInt(this.numerator=args[0]); \n        parseInt(this.denominator=1);}\n    simplify(){\n      const nArray=PrimeFactorization.getPrimeFactorsUnder100_000_000(this.numerator);\n      const dArray=PrimeFactorization.getPrimeFactorsUnder100_000_000(this.denominator);\n      let primes=null;\n\t\t\tprimes=ListUtility.elementsInCommon(nArray, dArray);\n      const gcf=Product.getProductOfList(primes);\n\t\t\tthis.numerator/=gcf;\n      this.denominator/=gcf;\n    }\n    latex=()=>{\n        return `\\\\Huge\\\\color{gold}`+this.basicLatex();\n    }\n    basicLatex(){\n        return `\\\\frac{${this.numerator}}{${this.denominator}}`\n    }\n    inlineLatex(){\n        return `{L}\\\\Large\\\\color{gold}`+this.basicLatex();\n    }\n    reducedFraction(args){\n        this.numerator=parseInt(args[0]); \n        this.denominator=parseInt(args[1]);\n        var nArray=PrimeFactorization.getPrimeFactorsUnder10_000(this.numerator);\n        var dArray=PrimeFactorization.getPrimeFactorsUnder10_000(this.denominator);\n        const primes=ListUtility.elementsInCommon(nArray, dArray);\n        const gcf=Product.getProductOfList(primes);\n        this.numerator/=gcf;\n        this.denominator/=gcf;\n    }\n    findLowestCommonMultiple(a,b){\n    }\n    addFraction(fraction){\n        fraction.reducedFraction();\n    }\n    /*if found in list2, add to return array\n    and remove from both\n    otherwise, just remove from first array\n    while array[i]\n    */\n}\nexport default Fraction;","import {fractionLatex} from './../FractionTeacher'\n\nconst addAFractionSolution=(args)=> {\n  let numerator='a'\n  let denominator='b'\n  if (args!==undefined) {\n    for (let i=0; i<args.length; i++) {\n      if (args[i]===undefined) {\n        args[i]=\"\"\n      }\n    }\n    numerator=args[0]\n    denominator=args[1]\n  }\n  return fractionLatex(numerator,denominator)\n}\n\nconst indeterminateLatex=function() {\n  return 'indeterminate'\n}\n\nconst undefinedLatex=function() {\n  return 'undefined'\n}\n\nexport const fractionSolution={type: 'int', solutions: [{function: addAFractionSolution, \n  inputs: ['a', 'b'], type: 'frac-pairs'}, {function: indeterminateLatex, inputs: [], \n    type: 'str'},{function: undefinedLatex, inputs: [], type: 'str'}]}","import FractionTeaching from '../mathteachings/FractionTeaching';\nimport Fraction from '../math/Fraction'\nimport PrimeFactorization from '../math/PrimeFactorization';\nimport Product from '../math/Product';\nimport ListUtility from '../../utilities/ListUtility';\nimport {fractionLatex} from './../FractionTeacher'\nimport {fractionSolution} from './../Solutions/FractionSolutions'\n\nconst teaching = FractionTeaching;\n\n//tells lesson or adds a fraction\nexport const addAFraction=(args) => {\n  if (args === undefined) {\n    let initialization = teaching.addAFraction()\n    let lesson = [\n      initialization\n    ]\n    return lesson\n  }\n  validateParams(args)\n  if ((parseInt(args[4])===0&&parseInt(args[2])!==0)||(parseInt(args[8])===0&&parseInt(args[6])!==0)){\n    return [teaching.undefinedAddition(\n      teaching.addAFractionProblem(args[2],args[4],args[6],args[8], fractionLatex(args[2],args[4])+\"+\"+fractionLatex(args[6],args[8]))),\n    ['undefined']]\n  } else if (parseInt(args[4])===0||parseInt(args[8])===0){\n    return [teaching.indeterminateAddition(\n      teaching.addAFractionProblem(args[2],args[4],args[6],args[8], fractionLatex(args[2],args[4])+\"+\"+fractionLatex(args[6],args[8]))),\n    ['indeterminate']]\n  \n  }\n  if (!PrimeFactorization.absVal100_000_000OrLess(parseInt(args[2]))\n    || !PrimeFactorization.absVal100_000_000OrLess(parseInt(args[4]))\n    || !PrimeFactorization.absVal100_000_000OrLess(parseInt(args[6]))\n    || !PrimeFactorization.absVal100_000_000OrLess(parseInt(args[8]))) {\n    let disclaimer = [[teaching.tooLargeToSimplify]]\n    return disclaimer\n  } else {\n    let numerator1 = parseInt(args[2])\n    let denom1 = parseInt(args[4])\n    let fraction1 = new Fraction()\n    fraction1.createFromNumAndDenom([numerator1, denom1])\n    let numerator2 = parseInt(args[6])\n    let denom2 = parseInt(args[8])\n    let fraction2 = new Fraction()\n    fraction2.createFromNumAndDenom([numerator2, denom2])\n    let initialization = initAddAFraction(numerator1, denom1, numerator2, denom2)\n    let solution = []\n    if (denom1 === denom2) {\n      let sum = numerator1 + numerator2\n      let fraction = new Fraction()\n      fraction.createFromNumAndDenom([sum, denom1])\n      fraction.simplify()\n      let answer = []\n      if (fraction.numerator % fraction.denominator === 0) {\n        answer = [\n          teaching.solutionHeading,\n          teaching.tellInteger(fraction.numerator / fraction.denominator),\n          fractionLatex(fraction.numerator, fraction.denominator)\n        ]\n      } else {\n        answer = [\n          teaching.solutionHeading,\n          teaching.tellFraction(fraction.numerator, fraction.denominator,\n            fractionLatex(fraction.numerator, fraction.denominator)),\n            fractionLatex(fraction.numerator, fraction.denominator)\n        ]\n      }\n      solution = [\n        initialization, teaching.denominatorIsTheSame(denom1),\n        teaching.tellLCD(denom1),\n        teaching.tellAddNumerators(denom1, numerator1, numerator2,\n          fractionLatex(`${numerator1}+${numerator2}`, denom1),\n          fractionLatex(sum, denom1), sum),\n        [teaching.tryToSimplifyHeading],\n        tryToSimplify(sum, denom1, fraction),\n        teaching.tellFraction(fractionLatex(sum, denom1), sum, denom1),\n        answer\n      ]\n    } else if (denom1 % denom2 === 0) {\n      let factor = denom1 / denom2\n      let newNumerator = numerator2 * factor\n      let sum = numerator1 + newNumerator\n\n      return tellFactorLCDSolution(initialization, denom1, numerator1, numerator2,\n        denom2, factor, newNumerator, sum)\n    } else if (denom2 % denom1 === 0) {\n      let factor = denom2 / denom1\n      let newNumerator = numerator1 * factor\n      let sum = numerator2 + newNumerator\n      return tellFactorLCDSolution(initialization, denom2, numerator2, numerator1,\n        denom1, factor, newNumerator, sum)\n    } else {\n      fraction1.simplify()\n      fraction2.simplify()\n      let simplification1 = tryToSimplify(numerator1, denom1, fraction1)\n      let simplification2 = tryToSimplify(numerator2, denom2, fraction2)\n      let initialization2 = initAddAFraction(fraction1.numerator, fraction1.denominator,\n        fraction2.numerator, fraction2.denominator)\n      let primes1=PrimeFactorization.getPrimeFactorsUnder100_000_000(fraction1.denominator)\n      let primes2=PrimeFactorization.getPrimeFactorsUnder100_000_000(fraction2.denominator)\n      let primesUnion=ListUtility.elementsNoDuplicatesInCommon(primes1, primes2)\n      let lcd=Product.getProductOfList(primesUnion)\n      let factor1=lcd/fraction1.denominator\n      let factor2=lcd/fraction2.denominator\n      let newNumerator1=factor1*fraction1.numerator\n      let newNumerator2=factor2*fraction2.numerator\n      let sum=newNumerator1+newNumerator2\n      let fractionSolution=new Fraction()\n      fractionSolution.createFromNumAndDenom([sum, lcd])\n      fractionSolution.simplify()\n      solution = [\n        initialization,\n        [teaching.tellNeedToSimplifyFirst,\n        teaching.tryToSimplifyHeading],\n        [teaching.forTheFirstFraction],\n        simplification1,\n        [teaching.forTheSecondFraction],\n        simplification2,\n        [teaching.needLCD],\n        initialization2,\n        teaching.tellPrimesUnion(fraction1.denominator, primes1, \n          fraction2.denominator, primes2, primesUnion, lcd),\n          teaching.tellLCD(lcd),\n        teaching.multiplyFractionsByMultiple(fractionLatex(fraction1.numerator, fraction1.denominator),\n        `${fractionLatex(`${fraction1.numerator}\\\\cdot${factor1}`, `${fraction1.denominator}\\\\cdot${factor1}`)}\n        =${fractionLatex(newNumerator1, lcd)}`, \n        fraction1.numerator, fraction1.denominator, factor1, newNumerator1,\n        lcd),\n        teaching.multiplyFractionsByMultiple(fractionLatex(fraction2.numerator, fraction2.denominator),\n        `${fractionLatex(`${fraction2.numerator}\\\\cdot${factor2}`, `${fraction2.denominator}\\\\cdot${factor2}`)}\n        =${fractionLatex(newNumerator2, lcd)}`, \n        fraction2.numerator, fraction2.denominator, factor2, newNumerator2,\n        lcd),\n        teaching.tellAddNumerators(lcd, newNumerator1, newNumerator2,\n          fractionLatex(`${newNumerator1}+${newNumerator2}`, lcd),\n          fractionLatex(sum, lcd), sum),\n          [teaching.tryToSimplifyHeading],\n    tryToSimplify(sum, lcd,\n      fractionSolution),\n    [\n      teaching.solutionHeading,\n      teaching.tellFraction(fractionSolution.numerator, fractionSolution.denominator,\n        fractionLatex(fractionSolution.numerator, fractionSolution.denominator))\n    ],\n    [\n      fractionLatex(fractionSolution.numerator, fractionSolution.denominator)\n    ]\n      ]\n    }\n    return solution\n  }\n}\n\nfunction tellFactorLCDSolution(initialization, denom1, numerator1, numerator2, denom2, factor, newNumerator, sum) {\n  let fractionSolution = new Fraction()\n  fractionSolution.createFromNumAndDenom([sum, denom1])\n  fractionSolution.simplify()\n  return [\n    initialization, teaching.denomIsDivisbleByOtherDenom(denom1, denom2),\n    teaching.tellLCD(denom1),\n    //this.teaching.multiplyFractionByMultiple(denom1, numerator2,\n      //denom2, factor, newNumerator,\n      //this.fractionLatex(`${numerator2}\\\\cdot${factor}`, `${denom2}\\\\cdot${factor}`)),\n      teaching.multiplyFractionsByMultiple(fractionLatex(numerator2, denom2),\n        `${fractionLatex(`${numerator2}\\\\cdot${factor}`, `${denom2}\\\\cdot${factor}`)}\n        =${fractionLatex(newNumerator, denom1)}`, \n        numerator2, denom2, factor, newNumerator,\n        denom1),\n    initAddAFraction(newNumerator, denom1, numerator1, denom1),\n    teaching.tellAddNumerators(denom1, newNumerator, numerator1,\n      fractionLatex(`${newNumerator}+${numerator1}`, denom1),\n      fractionLatex(sum, denom1), sum),\n    [teaching.tryToSimplifyHeading],\n    tryToSimplify(sum, denom1,\n      fractionSolution),\n    [\n      teaching.solutionHeading,\n      teaching.tellFraction(fractionSolution.numerator, fractionSolution.denominator,\n        fractionLatex(fractionSolution.numerator, fractionSolution.denominator))\n    ],\n    [\n    fractionLatex(fractionSolution.numerator, fractionSolution.denominator)\n    ]\n  ]\n}\n\n//shows a fraction addition\nexport const initAddAFraction=function initAddAFraction(num1, denom1, num2, denom2) {\n  return (\n    teaching.initAddAFraction(num1, denom1, num2, denom2,\n      `${fractionLatex(num1, denom1)}+${fractionLatex(num2, denom2)}`)\n  )\n}\n\n//simplifies a fraction\nexport const tryToSimplify=function tryToSimplify(numerator, denom, fraction) {\n  if (numerator !== fraction.numerator) {\n    if (numerator % denom === 0) {\n      return [teaching.tellSimplificationToInteger(numerator, denom,\n        fractionLatex(numerator, denom), numerator / denom),\n      teaching.checkOutSimplifyingFractions]\n    } else {\n      return [teaching.tellSimplificationToFraction(\n        numerator, denom,\n        fraction.numerator, fraction.denominator,\n        fractionLatex(numerator, denom),\n        fractionLatex(fraction.numerator, fraction.denominator),\n      ), `{br}`, teaching.checkOutSimplifyingFractions]\n    }\n  } else {\n    return [teaching.tellFraction(numerator, denom,\n      fractionLatex(numerator, denom)),\n    teaching.itIsAlreadyInSimplestForm,\n      `{br}`,\n    teaching.checkOutSimplifyingFractions]\n  }\n}\n\nfunction validateParams(args){\n  if (args===undefined || isNaN(parseInt(args[2])) || isNaN(parseInt(args[4])) ||\n    isNaN(parseInt(args[6])) || isNaN(parseInt(args[8]))) {\n    throw Error(\"Bad Input\")\n  }\n}\n\nexport const addAFractionProblem=function addAFractionProblem(args) {\n  validateParams(args)\n  return {problem: [[teaching.addAFractionProblem(args[2],args[4],args[6],args[8], \n    fractionLatex(args[2],args[4])+\"+\"+fractionLatex(args[6],args[8]))]],\n  solutions: fractionSolution}\n}","import FractionTeaching from '../mathteachings/FractionTeaching';\nimport Fraction from '../math/Fraction'\nimport PrimeFactorization from '../math/PrimeFactorization';\nimport Product from '../math/Product';\nimport ListUtility from '../../utilities/ListUtility';\nimport {fractionLatex} from './../FractionTeacher'\nimport {fractionSolution} from './../Solutions/FractionSolutions'\n\n\nconst teaching = FractionTeaching;\n\n//tells lesson or creates a fraction and simplifies it\nexport const fromNumeratorAndDenominator=(args)=> {\n  let mathObject = new Fraction()\n  if (args === undefined) {\n    mathObject = undefined\n    let initialization = teaching.fromNumeratorAndDenominator()\n    let lesson = [\n      initialization,\n    ]\n    return lesson\n  }\n  validateParams(args)\n  mathObject.createFromNumAndDenom([args[2], args[4]])\n  let initialization = teaching.fromNumeratorAndDenominator(\n    parseInt(args[2]), parseInt(args[4]), fractionLatex(parseInt(args[2]), parseInt(args[4]))\n  )\n  let simplification = simplify([args[2], args[4]])\n  let lesson = [\n    initialization,\n    simplification\n  ]\n  return lesson\n}\n\nfunction simplify(args) {\n  let primeFactorsTeaching=[]\n  let mathObject = new Fraction()\n  mathObject.createFromNumAndDenom([args[0], args[1]])\n  let numerator = parseInt(args[0])\n  let denominator = parseInt(args[1])\n  if (isNaN(numerator) || isNaN(denominator)) {\n    mathObject = null\n    return []\n  }\n  else if (numerator === 0 && denominator === 0) {\n    primeFactorsTeaching.push(teaching.indeterminate(\n      fractionLatex(numerator, denominator))\n    )\n    primeFactorsTeaching.push('indeterminate')\n    return primeFactorsTeaching\n  } else if (denominator === 0) {\n    primeFactorsTeaching.push(teaching.undefined(\n      parseInt(args[0]), fractionLatex(numerator, denominator)\n    ))\n    primeFactorsTeaching.push('undefined')\n    return primeFactorsTeaching\n  } else if (denominator === 1) {\n    primeFactorsTeaching.push(teaching.denominatorIs1(\n      numerator, fractionLatex(numerator, denominator)\n    ))\n    primeFactorsTeaching.push(fractionLatex(numerator, 1))\n    return primeFactorsTeaching\n  } else if (numerator === 1) {\n    primeFactorsTeaching.push(teaching.numeratorIs1(\n      denominator, fractionLatex(1, denominator)\n    ))\n    primeFactorsTeaching.push(fractionLatex(numerator, denominator))\n    return primeFactorsTeaching\n  } else if (denominator === numerator) {\n    mathObject.createFromNumAndDenom([1, 1])\n    primeFactorsTeaching.push(teaching.numeratorEqualsDenominator(\n      numerator, denominator,\n      fractionLatex(1, 1)\n    ))\n    primeFactorsTeaching.push(fractionLatex(numerator, denominator))\n    return primeFactorsTeaching\n  } else if (denominator % numerator === 0) {\n    mathObject.createFromNumAndDenom([1, denominator / numerator])\n    primeFactorsTeaching.push(teaching.denominatorModNumeratorIs0(\n      numerator, denominator, fractionLatex(1, denominator / numerator), denominator / numerator\n    ))\n    primeFactorsTeaching.push(fractionLatex(1, denominator/numerator))\n    return primeFactorsTeaching\n  } else if (numerator % denominator === 0) {\n    mathObject.createFromNumAndDenom([numerator / denominator, 1])\n    primeFactorsTeaching.push(teaching.numeratorModDenominatorIs0(\n      numerator, denominator, numerator / denominator\n    ))\n    primeFactorsTeaching.push(fractionLatex(numerator/denominator, 1))\n    return primeFactorsTeaching\n  } else if (!PrimeFactorization.absVal100_000_000OrLess(numerator)\n    || !PrimeFactorization.absVal100_000_000OrLess(denominator)) {\n    let disclaimer = [teaching.tryToSimplify]\n    disclaimer.push(teaching.tooLargeToSimplify)\n    return disclaimer\n  } else {\n    const nArray = PrimeFactorization.getPrimeFactorsUnder100_000_000(numerator);\n    const dArray = PrimeFactorization.getPrimeFactorsUnder100_000_000(denominator);\n    let primes = null;\n    primes = ListUtility.elementsInCommon(nArray, dArray);\n    const gcf = Product.getProductOfList(primes);\n    mathObject.numerator /= gcf;\n    mathObject.denominator /= gcf;\n    primeFactorsTeaching = teaching.getPrimeFactors(\n      numerator, nArray,\n      denominator, dArray)\n    primeFactorsTeaching.push('{br}')\n    if (primes.length > 0) {\n      primeFactorsTeaching.push(teaching.tellPrimesInCommon(primes))\n      primeFactorsTeaching.push('{br}')\n      primeFactorsTeaching.push(teaching.tellGCF(gcf, primes.length > 1))\n      primeFactorsTeaching.push('{br}')\n      primeFactorsTeaching.push(teaching.divideByGCF(\n        numerator, denominator, gcf,\n        mathObject.numerator, mathObject.denominator\n      ))\n    } else {\n      primeFactorsTeaching.push(teaching.tellNoPrimesInCommon(primes))\n    }\n    primeFactorsTeaching.push(\n      teaching.tellSimplestFormHeading\n    )\n    primeFactorsTeaching.push(\n      teaching.tellFraction(\n        mathObject.numerator, mathObject.denominator, fractionLatex(mathObject.numerator, mathObject.denominator))\n    )\n    primeFactorsTeaching.push(fractionLatex(mathObject.numerator, mathObject.denominator))\n    return primeFactorsTeaching\n  }\n}\n\nfunction validateParams(args){\n  if (isNaN(parseInt(args[2]))||isNaN(parseInt(args[4]))){\n    throw Error(\"Bad Input\")\n  }\n}\n\nexport const fromNumeratorAndDenominatorProblem=function fromNumeratorAndDenominatorProblem(args) {\n  validateParams(args)\n  return {problem: [[`{str-c}numerator: ${args[2]}`], [`{str-c}denominator: ${args[4]}`]],\n  solutions: fractionSolution}\n}","import FractionTeaching from '../mathteachings/FractionTeaching';\nimport {fractionLatex} from './../FractionTeacher'\nimport {fractionSolution} from './../Solutions/FractionSolutions'\n\nconst teaching = FractionTeaching;\n\n//tells lesson or creates a fraction from an integer\nexport const fromInteger=(args)=> {\n  if (args === undefined) {\n    let initialization = teaching.fromInteger()\n    let lesson = [\n      initialization\n    ]\n    return lesson\n  }\n  validateParams(args)\n    let initialization = teaching.fromInteger(parseInt(args[2]), fractionLatex(parseInt(args[2]), 1))\n    let lesson = [\n      initialization,\n      [\n        fractionLatex(args[2], 1)\n      ]\n    ]\n    return lesson\n}\n\nfunction validateParams(args){\n  if (args===undefined || isNaN(parseInt(args[2]))) {\n    throw Error(\"Bad Input\")\n  }\n}\n\nexport const fromIntegerProblem=function fromIntegerProblem(args) {\n  validateParams(args)\n  return {problem: [[`{str-c}integer: ${args[2]}`]],\n  solutions: fractionSolution}\n}","export const getRandomInt=function getRandomInt(min, max) {\n  return Math.floor(Math.random()*(max-min+1))-min\n}\n\nexport const getRandomIntArray=function getRandomIntArray(num, min, max) {\n  const array=[]\n  for (let i=0; i<num; i++) {\n    array.push(getRandomInt(min, max))\n  }\n  return array\n}","import FractionTeaching from './mathteachings/FractionTeaching';\nimport {addAFraction, addAFractionProblem} from './FractionTeacherMethods/AddFractiontoFraction'\nimport {fromNumeratorAndDenominator, fromNumeratorAndDenominatorProblem} from './FractionTeacherMethods/CreatFromNumeratorAndDenominator'\nimport {fromInteger, fromIntegerProblem} from './FractionTeacherMethods/CreateFractionFromInteger'\nimport {getRandomIntArray} from '../utilities/GetRandomInt'\nimport MathTeacher from './MathTeacher'\n\n\n//latex for a fraction\nexport const fractionLatex=(numerator, denominator) => {\n  return `\\\\frac{${numerator}}{${denominator}}`\n}\n\nclass FractionTeacher extends MathTeacher{\n\n  goodInput=false\n  goodProblemInput=false\n  goodAnswerInput=false\n\n  //the teaching with the String functions\n  teaching = FractionTeaching;\n\n  /*\n  fromNumeratorAndDenominatorProblem(args){\n    const splitArgs=args.split('@')\n    const num1=parseInt(splitArgs[2])\n    const denom1=parseInt(splitArgs[4])\n    return (\n      this.teaching.fromNumeratorAndDenominatorProblem(num1, denom1,\n        `${fractionLatex(num1, denom1)}`)\n    )\n  }\n\n  fromIntegerProblem(args){\n    const splitArgs=args.split('@')\n    const integer=parseInt(splitArgs[2])\n    return this.teaching.fromIntegerProblem(integer)\n  }\n\n  addAFractionProblem(args){\n    const splitArgs=args.split('@')\n    const num1=parseInt(splitArgs[2])\n    const denom1=parseInt(splitArgs[4])\n    const num2=parseInt(splitArgs[6])\n    const denom2=parseInt(splitArgs[8])\n    return (\n      this.teaching.addAFractionProblem(num1, denom1, num2, denom2,\n        `${fractionLatex(num1, denom1)}+${fractionLatex(num2, denom2)}`)\n    )\n  }\n  */\n\n  fromNumeratorAndDenominator(args){\n    return this.teach(fromNumeratorAndDenominator, args)\n  }\n\n  fromNumeratorAndDenominatorArgs() {\n    return getRandomIntArray(4, 0, 60)\n  }\n\n  fromNumeratorAndDenominatorProblem(args) {\n    return fromNumeratorAndDenominatorProblem(args)\n  }\n\n  fromInteger(args){\n    return this.teach(fromInteger, args)\n  }\n\n  fromIntegerArgs() {\n    return getRandomIntArray(2, 0, 1000)\n  }\n\n  fromIntegerProblem(args) {\n    return fromIntegerProblem(args)\n  }\n\n  addAFraction(args){\n    return this.teach(addAFraction, args)\n  }\n\n  addAFractionArgs() {\n    return getRandomIntArray(8, 0, 16)\n  }\n\n  addAFractionProblem(args) {\n    return addAFractionProblem(args)\n  }\n\n  giveProblem(method, args) {\n    try{\n      const problem=method(args)\n      //validate arguments\n      //problem summmary\n      //coded problem function\n      //coded latex function\n      //coded answer values in a sequence\n      //latex expects problems in an order\n      console.log(problem)\n      this.goodProblemInput=true\n      return problem\n    } catch(error) {\n      console.log(error)\n      return [this.teaching.tellBadInput()]\n    }\n  }\n\n  giveAnswer(method, args) {\n    try{\n      this.goodAnswerInput=false\n      const answer=method(args)\n      this.goodAnswerInput=true\n      return answer\n    } catch(error) {\n      console.log(error)\n      return [this.teaching.tellBadInput()]\n    }\n  }\n\n  teach(method, args){\n    try{\n      const teaching=method(args)\n      console.log(teaching)\n      this.goodInput=true\n      return teaching\n    } catch(error) {\n      console.log(error)\n      return [this.teaching.tellBadInput()]\n    }\n  }\n\n}\n\nexport default new FractionTeacher();\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","class MathTeaching{\n    static makeListFromArray(array){\n        if (array.length===0) {\n          return 'none'\n        } else if (array.length===1){\n            return array[0];\n        } else{\n            var list='';\n            for (var i=0; i<array.length; i++){\n                list+=array[i];\n                if (i===array.length-2){\n                    list+=' and ';\n                }\n                if (i<array.length-2){\n                    list+=(', ');\n                }\n            }\n        }\n        return list\n    }\n}\nexport default MathTeaching;"],"sourceRoot":""}